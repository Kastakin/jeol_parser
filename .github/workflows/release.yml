name: Release

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Release # Creates the release, assets will be added after building
        id: create_release
        uses: ncipollo/release-action@v1.11.2
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          bodyFile: release_text.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-python-linux:
    name: python-${{ matrix.target }}-linux
    needs: [create-release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          manylinux: auto
          working-directory: ./jeol_parser_python
      - name: Upload wheels to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: jeol_parser_python/dist
      - name: Upload wheels to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jeol_parser_python/dist/*.whl
          tag: ${{ github.ref_name }}
          overwrite: true
          file_glob: true

  build-python-windows:
    name: python-${{ matrix.target }}-windows
    needs: [create-release]
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          working-directory: ./jeol_parser_python
      - name: Upload wheels to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: jeol_parser_python/dist
      - name: Upload wheels to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jeol_parser_python/dist/*.whl
          tag: ${{ github.ref_name }}
          overwrite: true
          file_glob: true

  build-python-macos:
    name: python-${{ matrix.target }}-macos
    needs: [create-release]
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          working-directory: ./jeol_parser_python
      - name: Upload wheels to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: jeol_parser_python/dist
      - name: Upload wheels to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jeol_parser_python/dist/*.whl
          tag: ${{ github.ref_name }}
          overwrite: true
          file_glob: true

  publish_pypi:
    runs-on: ubuntu-latest
    needs: [build-python-linux, build-python-windows, build-python-macos]
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: .
          verify-metadata: false
          skip-existing: true
        # uses: PyO3/maturin-action@v1
        # env:
        #   MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        # with:
        #   command: upload
        #   args: --non-interactive --skip-existing *

  build_node:
    name: nodejs-${{ matrix.node_version }}-${{ matrix.system.target }}-${{ matrix.system.os }}
    runs-on: ${{ matrix.system.os }}
    # Prevent a situation where artifacts are uploaded to a non-existing release.
    needs: [create-release]
    strategy:
      fail-fast: false
      matrix:
        node_version: [16, 18, 20]
        system:
          - os: macos-11
            target: x86_64-apple-darwin
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: windows-2022
            target: x86_64-pc-windows-msvc
          # Would like to have aarch64 support, but actions does not provide these yet.
          # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    steps:
      - uses: actions/checkout@v3
      - name: Set release version
        # Set release version env in all three os, the commented command only works in linux and mac.
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
        # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: "https://registry.npmjs.org"
      - name: Install modules
        working-directory: ./jeol_parser_node
        run: npm i
      - name: Cache toolchain
        uses: actions/cache@v1
        with:
          path: /usr/share/rust/.cargo
          key: ${{ runner.os }}-rustup
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.system.target }}
          override: true

      - name: Build native
        working-directory: ./jeol_parser_node
        run: npm run release-native
      - name: Package the asset
        working-directory: ./jeol_parser_node
        # This will make a node-pre-gyp package.
        run: npx node-pre-gyp package
      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jeol_parser_node/build/stage/${{ github.ref_name }}/*.tar.gz
          tag: ${{ github.ref_name }}
          overwrite: true
          file_glob: true

      # - name: Upload to Github releases
      #   working-directory: ./jeol_parser_node
      #   # Use bash, even on Windows to make find available
      #   shell: bash
      #   # A release need to be created before upload
      #   run: gh release upload ${{ env.RELEASE_VERSION }} "$(find ./build -name *.tar.gz)" --clobber
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_npm:
    runs-on: ubuntu-latest
    # Prevent a situation where native build fails and a npm package is uploaded.
    needs: [build_node]
    steps:
      - uses: actions/checkout@v3
      - name: Set release version
        # Set release version env in all three os, the commented command only works in linux and mac.
        run: python3 -c "import os; tag = os.environ['GITHUB_REF'].split('/')[-1]; f = open(os.environ['GITHUB_ENV'], 'a'); f.write('RELEASE_VERSION='+tag); f.close();"
        # run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
          # Url is important! This makes NODE_AUTH_TOKEN accessible to npm publish.
          registry-url: "https://registry.npmjs.org"
      - name: Install modules
        working-directory: ./jeol_parser_node
        run: npm i

      - name: Tweak package.json
        working-directory: ./jeol_parser_node
        # This will update the package version to tag version and
        # add an install script in package.json so users who `npm i` this package
        # will trigger the node-pre-gyp to pull the os and arch specific binary.
        run: python3 -c "import os; import json; p = json.load(open('package.json')); p['scripts']['install'] = 'node-pre-gyp install'; json.dump(p, open('package.json', 'w'), indent=2, ensure_ascii=False);"

      # - name: Compile for esm and commonjs
      #   working-directory: ./jeol_parser_node
      #   run: npm run release-js

      - name: Publish to npm
        working-directory: ./jeol_parser_node
        # `--access public` is used to publish to my account's scope.
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  rollback-release:
    name: Rollback
    if: ${{ failure() || cancelled() }}
    needs: [publish_pypi, publish_npm]
    runs-on: ubuntu-latest
    steps:
      - uses: dev-drprasad/delete-tag-and-release@v1.0.1 # PRERELEASE is v1.0 and can also be used to test and give us feedback
        with:
          tag_name: ${{ github.ref_name }} #(required) tag name to delete
          github_token: ${{ secrets.GITHUB_TOKEN }} # (required) a GitHub token with write access to the repo that needs to be modified
          delete_release: true #(optional) default: true
